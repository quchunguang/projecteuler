// from: https://projecteuler.net
package projecteuler

import (
	"bufio"
	"fmt"
	"log"
	"math"
	"math/big"
	"os"
	"runtime"
	"sort"
	"strconv"
	"strings"
	"time"
)

// Problem 1 - Multiples of 3 and 5
//
// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
//
// Find the sum of all the multiples of 3 or 5 below 1000.
func PE1(N int64) int64 {
	var i int64
	var s int64 = 0
	for i = 3; i < N; i++ {
		if i%3 == 0 || i%5 == 0 {
			s += i
		}
	}
	return s
}

// Problem 2 - Even Fibonacci numbers
//
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
func PE2(N int64) int64 {
	var a, b, s int64 = 1, 2, 0
	for b <= N {
		if b%2 == 0 {
			s += b
		}
		a, b = b, a+b
	}
	return s
}

// Problem 3 - Largest prime factor
//
// The prime factors of 13195 are 5, 7, 13 and 29.
//
// What is the largest prime factor of the number 600851475143 ?
func PE3(N int64) int64 {
	// fmt.Printf("%d = ", N)
	var i int64
	var primes []int64
	primes = append(primes, 2)
	reduceN(&N, 2)

	for i = 3; i <= N; i += 2 {
		for _, p := range primes {
			if i%p == 0 {
				goto Out
			}
		}
		primes = append(primes, i)
		reduceN(&N, i)
	Out:
	}
	return primes[len(primes)-1]
}

func reduceN(N *int64, p int64) {
	for (*N)%p == 0 {
		(*N) /= p
		// fmt.Printf("%d*", p)
	}
}

// Problem 4 - Largest palindrome product
//
// A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
//
// Find the largest palindrome made from the product of two 3-digit numbers.
func PE4() int64 {
	var a, b, N int64
	var s int64 = 0
	for a = 999; a >= 900; a-- {
		for b = 999; b >= 900; b-- {
			N = a * b
			if Palindrome6(N) {
				if N > s {
					s = N
				}
			}
		}
	}
	return s
}

// Problem 5 - Smallest multiple
//
// 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
//
// What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
func PE5(N int64) int64 {
	pruducts := make(map[int64]int64)
	pruducts[2] = 1
	var i, j, s, p int64
	for i = 3; i <= N; i++ {
		s = i
		for p = range pruducts {
			for j = 0; s%p == 0; j++ {
				s /= p
			}
			if pruducts[p] < j {
				pruducts[p] = j
			}
		}
		if s > 1 {
			pruducts[s] = 1
		}
	}
	// fmt.Println(pruducts)
	s = 1
	for i = range pruducts {
		s *= Power(i, pruducts[i])
	}
	return s
}

// Problem 6 - Sum square difference
//
// The sum of the squares of the first ten natural numbers is,
// 1^2 + 2^2 + ... + 10^2 = 385
//
// The square of the sum of the first ten natural numbers is,
// (1 + 2 + ... + 10)^2 = 55^2 = 3025
//
// Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
//
// Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
func PE6(N int64) int64 {
	var i, s1, s2 int64
	for i = 1; i <= N; i++ {
		s1 += i
		s2 += i * i
	}
	return s1*s1 - s2
}
func PE6b(N int64) int64 {
	var i, j, s int64
	for i = 1; i <= N; i++ {
		for j = 1; j <= N; j++ {
			if i != j {
				s += i * j
			}
		}
	}
	return s
}
func PE6c(N int64) int64 {
	return N * (N + 1) * (3*N*N - N - 2) / 12
}

// Problem 7 - 10001st prime
//
// By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
//
// What is the 10 001st prime number?
func PE7(N int64) int64 {
	var i int64 = 3
	var count int64 = 1
	var primes []int64
	primes = append(primes, 2)
	for i = 3; count < N; i++ {
		for _, p := range primes {
			if i%p == 0 {
				goto Out
			}
		}
		primes = append(primes, i)
		count++
	Out:
	}
	return primes[len(primes)-1]
}

// Problem 8 - Largest product in a series
//
// The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
//
// 73167176531330624919225119674426574742355349194934
// 96983520312774506326239578318016984801869478851843
// 85861560789112949495459501737958331952853208805511
// 12540698747158523863050715693290963295227443043557
// 66896648950445244523161731856403098711121722383113
// 62229893423380308135336276614282806444486645238749
// 30358907296290491560440772390713810515859307960866
// 70172427121883998797908792274921901699720888093776
// 65727333001053367881220235421809751254540594752243
// 52584907711670556013604839586446706324415722155397
// 53697817977846174064955149290862569321978468622482
// 83972241375657056057490261407972968652414535100474
// 82166370484403199890008895243450658541227588666881
// 16427171479924442928230863465674813919123162824586
// 17866458359124566529476545682848912883142607690042
// 24219022671055626321111109370544217506941658960408
// 07198403850962455444362981230987879927244284909188
// 84580156166097919133875499200524063689912560717606
// 05886116467109405077541002256983155200055935729725
// 71636269561882670428252483600823257530420752963450
//
// Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
func PE8(N int) int {
	var data string = `73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450`
	var i, j, s, val, max int
	data = strings.Replace(data, "\n", "", -1)
	for i = 0; i < len(data)-N+1; i++ {
		s = 1
		for j = 0; j < N; j++ {
			val = int(data[i+j]) - 48
			s *= val
		}
		if s > max {
			max = s
		}
	}
	return max
}

// Problem 9 - Special Pythagorean triplet
//
// A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
//   a^2 + b^2 = c^2
//
// For example, 3^2 + 4^2 = 9 + 16 = 25 = 52.
//
// There exists exactly one Pythagorean triplet for which a + b + c = 1000.
// Find the product abc.
func PE9(N int) int {
	var i, j, k int
	for i = 1; i < N/3; i++ {
		for j = i + 1; j < N/2; j++ {
			k = N - i - j
			if i*i+j*j == k*k {
				fmt.Println(i, j, k)
				return i * j * k
			}
		}
	}
	return 0
}

// Problem 10 - Summation of primes
//
// The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
//
// Find the sum of all the primes below two million.
func PE10() int64 {
	var i, j, length, upbound, s int64
	var primes [NMAX / 10]int64
	primes[0] = 2
	primes[1] = 3
	length = 2
	for i = 5; i <= NMAX; i += 2 {
		upbound = int64(math.Sqrt(float64(i)))
		for j = 0; primes[j] <= upbound; j++ {
			// for j = 0; primes[j]*primes[j] <= i; j++ {
			if i%primes[j] == 0 {
				goto Out
			}
		}
		primes[length] = i
		length++
	Out:
	}
	s = 0
	for _, i := range primes {
		s += i
	}
	return s
}

const NMAX = 2e6

////// Sieve of Eratosthenes
func PE10a() int64 {
	var i, j, total, s int64
	var flags [NMAX]bool
	total = int64(math.Sqrt(NMAX)) // put outside, 22ms->14ms !!!
	for i = 2; i < total; i++ {
		if flags[i] {
			continue
		}
		for j = 2; i*j < NMAX; j++ {
			flags[i*j] = true
		}
	}
	for i = 2; i < NMAX; i++ {
		if flags[i] == false {
			s += i
		}
	}
	return s
}

var flags [NMAX]bool

const CORES = 4

func worker(total int64, coreid int64) {
	var i, j int64
	for i = 2 + coreid; i < total; i += CORES {
		if flags[i] {
			continue
		}
		for j = 2; i*j < NMAX; j++ {
			flags[i*j] = true
		}
	}
}
func PE10b() int64 {
	var i, total, s int64
	var done = make(chan bool)

	runtime.GOMAXPROCS(CORES)

	total = int64(math.Sqrt(NMAX))
	go func() {
		worker(total, 0)
		done <- true
	}()
	go func() {
		worker(total, 1)
		done <- true
	}()
	go func() {
		worker(total, 2)
		done <- true
	}()
	go func() {
		worker(total, 3)
		done <- true
	}()
	<-done
	<-done
	<-done
	<-done

	for i = 2; i < NMAX; i++ {
		if flags[i] == false {
			s += i
		}
	}
	return s
}

// Problem 11 - Largest product in a grid
//
// In the 20×20 grid below, four numbers along a diagonal line have been marked in red.
//
// 08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
// 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
// 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
// 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
// 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
// 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
// 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
// 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
// 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
// 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
// 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
// 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
// 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
// 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
// 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
// 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
// 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
// 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
// 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
// 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
//
// The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
//
// What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
func PE11() int {
	var data11 = [23][23]int{
		{8, 02, 22, 97, 38, 15, 0, 40, 0, 75, 04, 05, 07, 78, 52, 12, 50, 77, 91, 8, 0, 0, 0},
		{49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 04, 56, 62, 0, 0, 0, 0},
		{81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 03, 49, 13, 36, 65, 0, 0, 0},
		{52, 70, 95, 23, 04, 60, 11, 42, 69, 24, 68, 56, 01, 32, 56, 71, 37, 02, 36, 91, 0, 0, 0},
		{22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80, 0, 0, 0},
		{24, 47, 32, 60, 99, 03, 45, 02, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50, 0, 0, 0},
		{32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70, 0, 0, 0},
		{67, 26, 20, 68, 02, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21, 0, 0, 0},
		{24, 55, 58, 05, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72, 0, 0, 0},
		{21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95, 0, 0, 0},
		{78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 03, 80, 04, 62, 16, 14, 9, 53, 56, 92, 0, 0, 0},
		{16, 39, 05, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57, 0, 0, 0},
		{86, 56, 0, 48, 35, 71, 89, 07, 05, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58, 0, 0, 0},
		{19, 80, 81, 68, 05, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 04, 89, 55, 40, 0, 0, 0},
		{04, 52, 8, 83, 97, 35, 99, 16, 07, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66, 0, 0, 0},
		{88, 36, 68, 87, 57, 62, 20, 72, 03, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69, 0, 0, 0},
		{04, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36, 0, 0, 0},
		{20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 04, 36, 16, 0, 0, 0},
		{20, 73, 35, 29, 78, 31, 90, 01, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 05, 54, 0, 0, 0},
		{01, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 01, 89, 19, 67, 48, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	}

	var i, j, max, horizontal, vertical, diagonal, rdiagonal int
	for i = 0; i < 20; i++ {
		for j = 0; j < 20; j++ {
			horizontal = data11[i][j] * data11[i][j+1] * data11[i][j+2] * data11[i][j+3]
			vertical = data11[i][j] * data11[i+1][j] * data11[i+2][j] * data11[i+3][j]
			diagonal = data11[i][j] * data11[i+1][j+1] * data11[i+2][j+2] * data11[i+3][j+3]
			rdiagonal = data11[i][j+3] * data11[i+1][j+2] * data11[i+2][j+1] * data11[i+3][j]
			if horizontal > max {
				max = horizontal
			}
			if vertical > max {
				max = vertical
			}
			if diagonal > max {
				max = diagonal
			}
			if rdiagonal > max {
				max = rdiagonal
			}
		}
	}
	return max
}

// Problem 12 - Highly divisible triangular number
//
// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//      1: 1
//      3: 1,3
//      6: 1,2,3,6
//     10: 1,2,5,10
//     15: 1,3,5,15
//     21: 1,3,7,21
//     28: 1,2,4,7,14,28
//
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred divisors?
func PE12(N int) int {
	for i := 1; ; i++ {
		s := 1
		n := i * (i + 1) / 2
		pfs := PrimeFactors(n)
		for _, v := range pfs {
			s *= v + 1
		}
		if s >= N {
			// fmt.Println(n, s, pfs)
			return n
		}
	}
}

// Problem 13 - Large sum
//
// Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.
func PE13(filename string) string {
	file, err := os.Open(filename)
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()
	reader := bufio.NewReader(file)
	read := reader.ReadString
	line, err := read('\n')
	if err != nil {
		return ""
	}
	a := BigNum(line)
	for line, err = read('\n'); err == nil; line, err = read('\n') {
		b := BigNum(line)
		a = BigSum(a, b)
	}
	return strconv.FormatInt(a[0], 10)[0:10]
}

// Problem 14 - Longest Collatz sequence
//
// The following iterative sequence is defined for the set of positive integers:
//
// n → n/2 (n is even)
// n → 3n + 1 (n is odd)
//
// Using the rule above and starting with 13, we generate the following sequence:
// 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
//
// It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
//
// Which starting number, under one million, produces the longest chain?
//
// NOTE: Once the chain starts the terms are allowed to go above one million.
func PE14(limit int64) int64 {
	var i, maxlength, longest int64
	for i = limit; i >= 2; i-- {
		length := genIterLen(i)
		if maxlength < length {
			maxlength = length
			longest = i
		}
	}
	return longest
}
func genIterLen(n int64) int64 {
	var length int64 = 1
	for ; n != 1; length++ {
		if n%2 == 0 { //even
			n = n / 2
		} else {
			n = 3*n + 1
		}
	}
	return length
}

// Problem 15 - Lattice paths
//
// Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.
//
// How many such routes are there through a 20×20 grid?
func PE15(N int) int {
	return Comb(2*N, N)
}

// Problem 16 - Power digit sum
//
// 2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
//
// What is the sum of the digits of the number 2^1000?
func PE16(N int) int64 {
	bignum := BigPow(BigNum("2"), int64(N))
	return BigDigSum(bignum)
}

// Problem 17 - Number letter counts
//
// If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
//
// If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?
//
// NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of "and" when writing out numbers is in compliance with British usage.
// N must less than (or equal) 1000
func PE17(N int) (ret int) {
	onelen := map[int]int{
		0:  0,
		1:  3,
		2:  3,
		3:  5,
		4:  4,
		5:  4,
		6:  3,
		7:  5,
		8:  5,
		9:  4,
		10: 3,
		11: 6,
		12: 6,
		13: 8,
		14: 8,
		15: 7,
		16: 7,
		17: 9,
		18: 8,
		19: 8,
	}
	tenlen := map[int]int{
		0: 0,
		1: 0,
		2: 6,
		3: 6,
		4: 5,
		5: 5,
		6: 5,
		7: 7,
		8: 6,
		9: 6,
	}
	onename := map[int]string{
		0:  "",
		1:  "one",
		2:  "two",
		3:  "three",
		4:  "four",
		5:  "five",
		6:  "six",
		7:  "seven",
		8:  "eight",
		9:  "nine",
		10: "ten",
		11: "eleven",
		12: "twelve",
		13: "thirteen",
		14: "fourteen",
		15: "fifteen",
		16: "sixteen",
		17: "seventeen",
		18: "eighteen",
		19: "nineteen",
	}
	tenname := map[int]string{
		0: "",
		1: "",
		2: "twenty",
		3: "thirty",
		4: "forty",
		5: "fifty",
		6: "sixty",
		7: "seventy",
		8: "eighty",
		9: "ninety",
	}
	for n := 1; n <= N; n++ {
		m := n
		name := ""
		if m >= 1000 {
			name += "one thousand"
			ret += 3 + 8 // one thousand
			m %= 1000
		}
		if m >= 100 {
			name += onename[m/100]
			ret += onelen[m/100]

			name += " hundred"
			ret += 7 // hundred
			m %= 100
			if m != 0 {
				name += " and "
				ret += 3
			}
		}
		if m >= 20 {
			name += tenname[m/10]
			ret += tenlen[m/10]
			m %= 10
			if m > 0 {
				name += "-"
			}
		}
		if m > 0 {
			name += onename[m]
			ret += onelen[m]
		}
		fmt.Println(name)
	}
	return
}

// Problem 18 - Maximum path sum I
//
// By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.
//
//    3
//   7 4
//  2 4 6
// 8 5 9 3
//
// That is, 3 + 7 + 4 + 9 = 23.
//
// Find the maximum total from top to bottom of the triangle below:
//
//               75
//              95 64
//             17 47 82
//            18 35 87 10
//           20 04 82 47 65
//          19 01 23 75 03 34
//         88 02 77 73 07 63 67
//        99 65 04 28 06 16 70 92
//       41 41 26 56 83 40 80 70 33
//      41 48 72 33 47 32 37 16 94 29
//     53 71 44 65 25 43 91 52 97 51 14
//    70 11 33 28 77 73 17 78 39 68 17 57
//   91 71 52 38 17 14 91 43 58 50 27 29 48
//  63 66 04 68 89 53 67 30 73 16 69 87 40 31
// 04 62 98 27 23 09 70 98 73 93 38 53 60 04 23
//
// NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)
func PE18(filename string) int {
	data := ReadMatrixInts(filename, " ")
	// Find biggest path
	return findPathMax(data, 0, 0)
}

func findPathMax(data [][]int, i, j int) (ret int) {
	if i == len(data)-1 {
		return data[i][j]
	}
	l := findPathMax(data, i+1, j)
	r := findPathMax(data, i+1, j+1)
	if l > r {
		ret = l + data[i][j]
	} else {
		ret = r + data[i][j]
	}
	return
}

// Problem 19 - Counting Sundays
//
// You are given the following information, but you may prefer to do some research for yourself.
//
//     1 Jan 1900 was a Monday.
//     Thirty days has September,
//     April, June and November.
//     All the rest have thirty-one,
//     Saving February alone,
//     Which has twenty-eight, rain or shine.
//     And on leap years, twenty-nine.
//     A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
//
// How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?
func PE19() (ret int) {
	l, _ := time.LoadLocation("Asia/Shanghai")
	for y := 1901; y <= 2000; y++ {
		for m := 1; m <= 12; m++ {
			t := time.Date(y, time.Month(m), 1, 1, 1, 39, 108924743, l)
			if t.Weekday() == time.Sunday {
				// fmt.Println(t)
				ret++
			}
		}
	}
	return
}
func PE19b() (ret int) {
	week := 1 // 1900.1.1 is Monday
	for y := 1900; y <= 2000; y++ {
		for m := 1; m <= 12; m++ {
			// get days of this month
			days := 31
			if m == 4 || m == 6 || m == 9 || m == 11 {
				days = 30
			}
			if m == 2 {
				days = 28
				if y%4 == 0 && y%100 != 0 || y%400 == 0 {
					days = 29
				}
			}

			// iterator days of month
			for d := 1; d <= days; d++ {
				if y == 1901 && m == 1 && d == 1 {
					ret = 0
				}
				if d == 1 && week == 0 {
					ret++
				}
				week = (week + 1) % 7
			}
		}
	}
	return
}

// Problem 20 - Factorial digit sum
//
// n! means n × (n − 1) × ... × 3 × 2 × 1
//
// For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,
// and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.
//
// Find the sum of the digits in the number 100!
func PE20(N int) (ret int) {
	s := BigStr(BigFact(N))
	for _, c := range s {
		ret += int(c - 0x30)
	}
	return ret
}

// Problem 21 - Amicable numbers
//
// Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
// If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.
//
// For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.
//
// Evaluate the sum of all the amicable numbers under 10000.
func PE21(N int) (sum int) {
	for a := 1; a <= N; a++ {
		b := SumInts(Factors(a))
		if SumInts(Factors(b)) == a && a != b {
			// fmt.Println(a, b)
			sum += a
		}
	}
	return
}

// Problem 22 - Names scores
//
// Using names.txt (right click and 'Save Link/Target As...'), a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.
//
// For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN would obtain a score of 938 × 53 = 49714.
//
// What is the total of all the name scores in the file?
func PE22(filename string) (ret int) {
	words := ReadWords(filename, ",", true)
	sort.Strings(words)

	for i, w := range words {
		ret += (i + 1) * ScoreWord(w)
	}
	return
}

// Problem 23 - Non-abundant sums
//
// A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.
//
// A number n is called deficient if the sum of its proper divisors is less than n and it is called abundant if this sum exceeds n.
//
// As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of two abundant numbers is 24. By mathematical analysis, it can be shown that all integers greater than 28123 can be written as the sum of two abundant numbers. However, this upper limit cannot be reduced any further by analysis even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than this limit.
//
// Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.
func PE23() (ret int) {
	GenAbundants(28123)
	// All integers > 28123 can be written as the sum of two abundant numbers.
	for i := 1; i <= 28123; i++ {
		for _, ab := range Abundants {
			if ab >= i {
				// Non-abundant sum found
				ret += i
				break
			}
			if InInts(Abundants, i-ab) {
				break
			}
		}
	}
	return
}

// Problem 24 - Lexicographic permutations
//
// A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:
//
// 012   021   102   120   201   210
//
// What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?
func PE24(n int) int {
	const length = 10 // 0 .. (length-1)
	n = n - 1         // nth choices will pass over n-1 choices
	var s, k [length]int
	var f []int
	var ret string

	for i := 0; i < length; i++ {
		f = append(f, i)
	}

	s[length-1] = 1 // 0! = 1, s[9-i]=i!
	for i := 1; i < length; i++ {
		s[length-i-1] = s[length-i] * i
	}
	for i := 0; i < length; i++ {
		if n < s[i] {
			continue
		}
		k[i] = n / s[i]
		n = n % s[i]
	}

	for i := 0; i < length; i++ {
		ret += strconv.Itoa(f[k[i]])
		f = DeleteIndex(f, k[i])
	}
	reti, _ := strconv.Atoi(ret)
	return reti
}

// Problem 25 - 1000-digit Fibonacci number
//
// The Fibonacci sequence is defined by the recurrence relation:
//
//     Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.
//
// Hence the first 12 terms will be:
//
//     F1 = 1
//     F2 = 1
//     F3 = 2
//     F4 = 3
//     F5 = 5
//     F6 = 8
//     F7 = 13
//     F8 = 21
//     F9 = 34
//     F10 = 55
//     F11 = 89
//     F12 = 144
//
// The 12th term, F12, is the first term to contain three digits.
//
// What is the first term in the Fibonacci sequence to contain 1000 digits?
func PE25(n int) (ret int) {
	fnp := BigNum("1")  //f1
	fn := BigNum("1")   //f2
	for i := 3; ; i++ { //fn
		fnp, fn = fn, BigSum(fnp, fn)
		if BigLen(fn) == n {
			ret = i
			return
		}
	}
}

// Problem 26 - Reciprocal cycles
//
// A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:
//
//     1/2	= 	0.5
//     1/3	= 	0.(3)
//     1/4	= 	0.25
//     1/5	= 	0.2
//     1/6	= 	0.1(6)
//     1/7	= 	0.(142857)
//     1/8	= 	0.125
//     1/9	= 	0.(1)
//     1/10	= 	0.1
//
// Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be seen that 1/7 has a 6-digit recurring cycle.
//
// Find the value of d < 1000 for which 1/d contains the longest recurring cycle in its decimal fraction part.
func PE26(N int) (ret int) {
	var fullprimes []int

	var dms []DivMod
	var maxlen int
	for n := 2; n < N; n++ {
		m := 1
		dms = dms[:0]
		for {
			m *= 10
			if m%n == 0 {
				break
			}
			dm := DivMod{m / n, m % n}
			if index := InDivMods(dms, dm); index >= 0 {
				length := len(dms) - index
				if length == n-1 {
					fullprimes = append(fullprimes, n)
				}
				if length > maxlen {
					maxlen = length
					ret = n
					// fmt.Println(n, maxlen, dms)
				}
				break
			}
			dms = append(dms, dm)
			m %= n
		}
	}

	// Question
	// * For 1/n, max recurring cycle length is n-1.
	// * All max recurring cycle number, are primes.
	// * Not all primes are recurring cycle numbers.
	// color reference ~/bin/colorcat.sh
	GenPrimes(N)
	var r, yy int
	for _, v := range primes {
		if InInts(fullprimes, v) {
			fmt.Printf("%s%4d%s ", CRR, v, CRD)
			yy++
		} else {
			fmt.Printf("%4d ", v)
		}

		r++
		if r%32 == 0 {
			fmt.Printf(" ρ = %4.2f\n", float64(yy)/float64(r))
		}
	}
	fmt.Println()

	return
}

// Problem 27 - Quadratic primes
//
// Euler discovered the remarkable quadratic formula:
//
// n² + n + 41
//
// It turns out that the formula will produce 40 primes for the consecutive values n = 0 to 39. However, when n = 40, 402 + 40 + 41 = 40(40 + 1) + 41 is divisible by 41, and certainly when n = 41, 41² + 41 + 41 is clearly divisible by 41.
//
// The incredible formula  n² − 79n + 1601 was discovered, which produces 80 primes for the consecutive values n = 0 to 79. The product of the coefficients, −79 and 1601, is −126479.
//
// Considering quadratics of the form:
//
//     n² + an + b, where |a| < 1000 and |b| < 1000
//
//     where |n| is the modulus/absolute value of n
//     e.g. |11| = 11 and |−4| = 4
//
// Find the product of the coefficients, a and b, for the quadratic expression that produces the maximum number of primes for consecutive values of n, starting with n = 0.
func PE27() (ret int) {
	max := 0
	// ret = QuadraticPrimes(1, 41)
	for a := -999; a < 1000; a++ {
		for b := -999; b < 1000; b++ {
			s := QuadraticPrimes(a, b)
			if s > max {
				max = s
				ret = a * b
				fmt.Println(a, b, s)
			}
		}
	}
	return
}

// Problem 28 - Number spiral diagonals
//
// Starting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows:
//
// 21 22 23 24 25
// 20  7  8  9 10
// 19  6  1  2 11
// 18  5  4  3 12
// 17 16 15 14 13
//
// It can be verified that the sum of the numbers on the diagonals is 101.
//
// What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed in the same way?
func PE28(N int) (ret int) {
	ret = 1
	for n := 3; n <= N; n += 2 {
		ret += 4*n*n - 6*n + 6
	}
	return
}

// Problem 29 - Distinct powers
//
// Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
//
//     2^2=4, 2^3=8, 2^4=16, 2^5=32
//     3^2=9, 3^3=27, 3^4=81, 3^5=243
//     4^2=16, 4^3=64, 4^4=256, 4^5=1024
//     5^2=25, 5^3=125, 5^4=625, 5^5=3125
//
// If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
//
// 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
//
// How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
func PE29(N int) (ret int) {
	var data []string
	for i := 2; i <= N; i++ {
		for j := 2; j <= N; j++ {
			data = append(data, BigStr(BigPow(BigNum(strconv.Itoa(i)), int64(j))))
		}
	}
	sort.Sort(SortIntStr(data))
	before := ""
	for _, v := range data {
		if before != v {
			ret++
			before = v
		}
	}
	return
}

// Problem 30 - Digit fifth powers
//
// Surprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:
//
//     1634 = 14 + 64 + 34 + 44
//     8208 = 84 + 24 + 04 + 84
//     9474 = 94 + 44 + 74 + 44
//
// As 1 = 14 is not a sum it is not included.
//
// The sum of these numbers is 1634 + 8208 + 9474 = 19316.
//
// Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.
func PE30(m int) int {
	var ret []int
	for i := 10; i < genlimit(m); i++ {
		nlist := MapNumInts(i)
		if i == PowSum(nlist, m) {
			ret = append(ret, i)
		}
	}
	return SumInts(ret)
}
func genlimit(n int) int {
	for i := 1; ; i++ {
		if PowInt(9, n)*i < PowInt(10, i-1) {
			return PowInt(10, i-1)
		}
	}
}

// Problem 31 - Coin sums
//
// In England the currency is made up of pound, £, and pence, p, and there are eight coins in general circulation:
//
//     1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p).
//
// It is possible to make £2 in the following way:
//
//     1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p
//
// How many different ways can £2 be made using any number of coins?
func PE31(N int) (ret int) {
	coinset := "abcdefgh" // This will coast 2.5s
	// coinset := "hgfedcba" // This will coast 4.2s
	planCoin(coinset, N, "")
	ret = pe31ret
	return
}

var coinSetCents = map[rune]int{'a': 200, 'b': 100, 'c': 50, 'd': 20, 'e': 10, 'f': 5, 'g': 2, 'h': 1}
var pe31ret int = 0

func planCoin(coinset string, remain int, preset string) {
	if remain == 0 {
		// Found one way
		// fmt.Println(preset)
		pe31ret++
		return
	}
	if len(coinset) == 0 {
		return
	}
	c := rune(coinset[0])
	r := remain
	p := preset
	for j := 0; r >= 0; j++ {
		planCoin(coinset[1:], r, p)
		r = r - coinSetCents[c]
		p = p + string(c)
	}
}

// Problem 32 - Pandigital products
//
// We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once; for example, the 5-digit number, 15234, is 1 through 5 pandigital.
//
// The product 7254 is unusual, as the identity, 39 × 186 = 7254, containing multiplicand, multiplier, and product is 1 through 9 pandigital.
//
// Find the sum of all products whose multiplicand/multiplier/product identity can be written as a 1 through 9 pandigital.
// HINT: Some products can be obtained in more than one way so be sure to only include it once in your sum.
func PE32() (ret int) {
	// Permutation (9,9) of "123456789"
	PermStrCallback = pandigitalProduct
	PermStr("123456789", 9, "")
	ret = SumInts(pandigitalProducts)

	return
}

var pandigitalProducts []int

func pandigitalProduct(ret string) {
	var sa, sb, sc string
	var a, b, c int

	// There are only 3 possible divides of a given permutation
	//1,3,5
	sa, sb, sc = ret[0:1], ret[1:4], ret[4:]
	a, _ = strconv.Atoi(sa)
	b, _ = strconv.Atoi(sb)
	c, _ = strconv.Atoi(sc)
	if a*b == c {
		fmt.Println(a, ":", b, ":", c)
		InsertUniq(&pandigitalProducts, c)
	}

	//1,4,4
	sa, sb, sc = ret[0:1], ret[1:5], ret[5:]
	a, _ = strconv.Atoi(sa)
	b, _ = strconv.Atoi(sb)
	c, _ = strconv.Atoi(sc)
	if a*b == c {
		fmt.Println(a, ":", b, ":", c)
		InsertUniq(&pandigitalProducts, c)
	}

	//2,3,4
	sa, sb, sc = ret[0:2], ret[2:5], ret[5:]
	a, _ = strconv.Atoi(sa)
	b, _ = strconv.Atoi(sb)
	c, _ = strconv.Atoi(sc)
	if a*b == c {
		fmt.Println(a, ":", b, ":", c)
		InsertUniq(&pandigitalProducts, c)
	}
}

// Problem 33 - Digit canceling fractions
//
// The fraction 49/98 is a curious fraction, as an inexperienced mathematician in attempting to simplify it may incorrectly believe that 49/98 = 4/8, which is correct, is obtained by cancelling the 9s.
//
// We shall consider fractions like, 30/50 = 3/5, to be trivial examples.
//
// There are exactly four non-trivial examples of this type of fraction, less than one in value, and containing two digits in the numerator and denominator.
//
// If the product of these four fractions is given in its lowest common terms, find the value of the denominator.
func PE33() (ret int) {
	var sa, sb string
	var e bool
	mul := big.NewRat(1, 1)
	for a := 10; a < 100; a++ {
		for b := a + 1; b < 100; b++ {
			sa = strconv.Itoa(a)
			sb = strconv.Itoa(b)
			sa, sb, e = CancelStr(sa, sb)
			if e {
				continue
			}
			ca, _ := strconv.Atoi(sa)
			cb, _ := strconv.Atoi(sb)
			rat1 := big.NewRat(int64(a), int64(b))
			rat2 := big.NewRat(int64(ca), int64(cb))
			if rat1.Cmp(rat2) == 0 {
				// fmt.Println(a, b)
				mul.Mul(mul, rat1)
			}
		}
	}
	ret, _ = strconv.Atoi(mul.Denom().String())
	return
}

// Problem 34 - Digit factorials
//
// 145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.
//
// Find the sum of all numbers which are equal to the sum of the factorial of their digits.
//
// Note: as 1! = 1 and 2! = 2 are not sums they are not included.
// notice: this function will never stop
func PE34() (ret int) {
	var prod [10]int
	prod[0] = 1
	mul := 1
	for i := 1; i <= 9; i++ {
		mul *= i
		prod[i] = mul
	}
	fmt.Println(big.NewInt(1).MulRange(1, 9))
	fmt.Println(prod)

	sum := 0
	for i := 10; ; i++ {
		nums := DigNums(i)
		s := 0
		for _, c := range nums {
			s += prod[c]
		}
		if s == i {
			sum += i
			fmt.Println(i, sum)
		}
	}
	return
}

// Problem 35 - Circular primes
//
// The number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, are themselves prime.
//
// There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.
//
// How many circular primes are there below one million?
func PE35(N int) (ret int) {
	GenPrimes(N)
	for _, p := range primes {
		sp := strconv.Itoa(p)
		for i := 1; i < len(sp); i++ {
			rsp := sp[i:] + sp[:i] // Circular numbers at index i
			rp, _ := strconv.Atoi(rsp)
			if !InInts(primes, rp) {
				goto NEXT
			}
		}
		// Found!!!
		fmt.Println(p)
		ret++
	NEXT:
	}
	return
}

// Problem 36 - Double-base palindromes
//
// The decimal number, 585 = 10010010012 (binary), is palindromic in both bases.
//
// Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2.
//
// (Please note that the palindromic number, in either base, may not include leading zeros.)
func PE36(n int) int {
	var ret []int
	for i := 1; i < n; i++ {
		if IsPalindromeBytes([]byte(strconv.Itoa(i))) &&
			IsPalindromeBytes([]byte(strconv.FormatInt(int64(i), 2))) {
			ret = append(ret, i)
		}
	}
	return SumInts(ret)
}

// Problem 37 - Truncatable primes
//
// The number 3797 has an interesting property. Being prime itself, it is possible to continuously remove digits from left to right, and remain prime at each stage: 3797, 797, 97, and 7. Similarly we can work from right to left: 3797, 379, 37, and 3.
//
// Find the sum of the only eleven primes that are both truncatable from left to right and right to left.
//
// NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.
func PE37() (ret int) {
	var count int = 0
	var N int = 1e3
	GenPrimes(N)
	for i := 0; ; i++ {
		// If not enough primes, double search range
		if i == len(primes) {
			N *= 2
			GenPrimes(N)
		}

		// Check if all cuts of primes[i] are also primes
		sp := strconv.Itoa(primes[i])
		for i := 1; i < len(sp); i++ {
			rp1, _ := strconv.Atoi(sp[i:])
			rp2, _ := strconv.Atoi(sp[:i])
			if !InInts(primes, rp1) || !InInts(primes, rp2) {
				goto NEXT
			}
		}

		// 2, 3, 5, and 7 are not considered to be truncatable primes.
		if primes[i] <= 7 {
			goto NEXT
		}
		// Found!!!
		fmt.Println(primes[i])
		count++
		ret += primes[i]
		if count == 11 { // Found all
			break
		}
	NEXT:
	}
	return
}

// Problem 38 - Pandigital multiples
//
// Take the number 192 and multiply it by each of 1, 2, and 3:
//
//     192 × 1 = 192
//     192 × 2 = 384
//     192 × 3 = 576
//
// By concatenating each product we get the 1 to 9 pandigital, 192384576. We will call 192384576 the concatenated product of 192 and (1,2,3)
//
// The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4, and 5, giving the pandigital, 918273645, which is the concatenated product of 9 and (1,2,3,4,5).
//
// What is the largest 1 to 9 pandigital 9-digit number that can be formed as the concatenated product of an integer with (1,2, ... , n) where n > 1?
func PE38() (ret int) {
	for a := 1; a < 1e4; a++ {
		s := ""
		for n := 1; ; n++ {
			s += strconv.Itoa(a * n)
			if len(s) < 9 {
				continue
			} else if len(s) > 9 {
				break
			} else {
				// len(s)==9
				ss := strings.Split(s, "")
				sort.Strings(ss)
				if strings.Join(ss, "") == "123456789" {
					fmt.Println(a, n, s)
					num, _ := strconv.Atoi(s)
					if num > ret {
						ret = num
					}
				}
			}
		}
	}
	return
}

// Problem 39 - Integer right triangles
//
// If p is the perimeter of a right angle triangle with integral length sides, {a,b,c}, there are exactly three solutions for p = 120.
//
// {20,48,52}, {24,45,51}, {30,40,50}
//
// For which value of p ≤ 1000, is the number of solutions maximised?
func PE39(n int) int {
	var a, b, c, p int
	var sum, max, maxp int
	for p = 3; p <= n; p++ {
		sum = 0
		for c = p / 3; c <= p/2; c++ {
			for a = 1; a < p/3; a++ {
				b = p - c - a
				if b <= 0 {
					continue
				}
				if RightTri(a, b, c) {
					sum++
				}
			}
		}
		if sum > max {
			max = sum
			maxp = p
		}
	}
	fmt.Println("summax", max)
	return maxp
}

// Problem 40 - Champernowne's constant
//
// An irrational decimal fraction is created by concatenating the positive integers:
//
// 0.123456789101112131415161718192021...
//
// It can be seen that the 12th digit of the fractional part is 1.
//
// If dn represents the nth digit of the fractional part, find the value of the following expression.
//
// d1 × d10 × d100 × d1000 × d10000 × d100000 × d1000000
func PE40(N int) (ret int) {
	ret = 1
	for i := 1; i <= N; i *= 10 {
		ret *= Champernowne(i)
	}
	return
}

// Problem 41 - Pandigital prime
//
// We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once. For example, 2143 is a 4-digit pandigital and is also prime.
//
// What is the largest n-digit pandigital prime that exists?
// NOTE: This program will never stop!!!
func PE41() (ret int) {
	var N int = 1e3
	numlist := "123456789"
	GenPrimes(N)
	for i := 0; ; i++ {
		// If not enough primes, double search range
		if i == len(primes) {
			N *= 2
			GenPrimes(N)
		}

		// Check if the prime is pandigital
		sp := strconv.Itoa(primes[i])
		ss := strings.Split(sp, "")
		sort.Strings(ss)
		if strings.Join(ss, "") == numlist[:len(sp)] {
			// Found!!!
			fmt.Println(primes[i])
		}
	}
	return
}

// Problem 42 - Coded triangle numbers
//
// The nth term of the sequence of triangle numbers is given by, tn = ½n(n+1); so the first ten triangle numbers are:
//
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// By converting each letter in a word to a number corresponding to its alphabetical position and adding these values we form a word value. For example, the word value for SKY is 19 + 11 + 25 = 55 = t10. If the word value is a triangle number then we shall call the word a triangle word.
//
// Using words.txt (right click and 'Save Link/Target As...'), a 16K text file containing nearly two-thousand common English words, how many are triangle words?
func PE42(filename string) (ret int) {
	words := ReadWords(filename, ",", true)
	for _, w := range words {
		if IsTriangle(SumAscii(w)) {
			ret++
		}
	}
	return
}

// Problem 43 - Sub-string divisibility
//
// The number, 1406357289, is a 0 to 9 pandigital number because it is made up of each of the digits 0 to 9 in some order, but it also has a rather interesting sub-string divisibility property.
//
// Let d1 be the 1st digit, d2 be the 2nd digit, and so on. In this way, we note the following:
//
//     d2d3d4=406 is divisible by 2
//     d3d4d5=063 is divisible by 3
//     d4d5d6=635 is divisible by 5
//     d5d6d7=357 is divisible by 7
//     d6d7d8=572 is divisible by 11
//     d7d8d9=728 is divisible by 13
//     d8d9d10=289 is divisible by 17
//
// Find the sum of all 0 to 9 pandigital numbers with this property.
func PE43() (ret int) {
	PermStrCallback = checkSubStrDiv
	PermStr("0123456789", 10, "")
	ret = sumSubStrDiv
	return
}

var sumSubStrDiv int = 0

func checkSubStrDiv(ret string) {
	if isSubStrDiv(ret) {
		subStrDiv, _ := strconv.Atoi(ret)
		sumSubStrDiv += subStrDiv
	}
}

func isSubStrDiv(strnum string) bool {
	d234, _ := strconv.Atoi(strnum[1:4])
	if d234%2 != 0 {
		return false
	}
	d345, _ := strconv.Atoi(strnum[2:5])
	if d345%3 != 0 {
		return false
	}
	d456, _ := strconv.Atoi(strnum[3:6])
	if d456%5 != 0 {
		return false
	}
	d567, _ := strconv.Atoi(strnum[4:7])
	if d567%7 != 0 {
		return false
	}
	d678, _ := strconv.Atoi(strnum[5:8])
	if d678%11 != 0 {
		return false
	}
	d789, _ := strconv.Atoi(strnum[6:9])
	if d789%13 != 0 {
		return false
	}
	d890, _ := strconv.Atoi(strnum[7:10])
	if d890%17 != 0 {
		return false
	}
	fmt.Println(strnum)
	return true
}

// Problem 44 - Pentagon numbers
//
// Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
//
// 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
//
// It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
//
// Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
func PE44() (ret int) {
	ret = MaxInt
	for i := 2; ; i++ {
		GenPentagons(Pentagonal(i))
		for j := 1; j < i; j++ {
			pi := Pentagons[i-1]
			pj := Pentagons[j-1]
			if InInts(Pentagons, pi-pj) {
				GenPentagons(pi + pj)
				if InInts(Pentagons, pi+pj) {
					if pi-pj < ret {
						ret = pi - pj
						return
						// fmt.Println(ret)
					}
				}
			}
		}
	}
}

// Problem 45 - Triangular, pentagonal, and hexagonal
//
// Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
// Triangle 	  	Tn=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
// Pentagonal 	  	Pn=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
// Hexagonal 	  	Hn=n(2n−1) 	  	1, 6, 15, 28, 45, ...
//
// It can be verified that T285 = P165 = H143 = 40755.
//
// Find the next triangle number that is also pentagonal and hexagonal.
func PE45() int {
	var t, p, h int = 1, 1, 1
	var T, P, H int
	for {
		T = Triangle(t)
		P = Pentagonal(p)
		H = Hexagonal(h)
		if T == P && T == H {
			fmt.Println(t, p, h, T)
		}
		switch {
		case T <= P && T <= H:
			t++
		case P <= T && P <= H:
			p++
		default:
			h++
		}
	}
	return 0
}

// Problem 46 - Goldbach's other conjecture
//
// It was proposed by Christian Goldbach that every odd composite number can be written as the sum of a prime and twice a square.
//
// 9 = 7 + 2×1^2
// 15 = 7 + 2×2^2
// 21 = 3 + 2×3^2
// 25 = 7 + 2×3^2
// 27 = 19 + 2×2^2
// 33 = 31 + 2×1^2
//
// It turns out that the conjecture was false.
//
// What is the smallest odd composite that cannot be written as the sum of a prime and twice a square?
var oddcomposites = []int{9, 15}

func PE46() int {
	for i := 17; ; i += 2 {
		upbound := int(math.Sqrt(float64(i)))
		for j := 0; primes[j] <= upbound; j++ {
			if i%primes[j] == 0 {
				oddcomposites = append(oddcomposites, i)
				if !IsOddComposites(i) {
					return i
				}
				goto NEXT
			}
		}
		primes = append(primes, i)
	NEXT:
	}
}

// Problem 47 - Distinct primes factors
//
// The first two consecutive numbers to have two distinct prime factors are:
//
// 14 = 2 × 7
// 15 = 3 × 5
//
// The first three consecutive numbers to have three distinct prime factors are:
//
// 644 = 2² × 7 × 23
// 645 = 3 × 5 × 43
// 646 = 2 × 17 × 19.
//
// Find the first four consecutive integers to have four distinct prime factors. What is the first of these numbers?
func PE47(n int) int {
	ok := 0
	for i := 4; ; i++ {
		if len(PrimeFactors(i)) != n {
			ok = 0
			continue
		}
		ok++
		if ok == n {
			return i - n + 1
		}
	}
}

// Problem 48 - Self powers
//
// The series, 1^1 + 2^2 + 3^3 + ... + 10^10 = 10405071317.
//
// Find the last ten digits of the series, 1^1 + 2^2 + 3^3 + ... + 1000^1000.
func PE48(N int64) (ret int64) {
	var n int64
	for n = 1; n <= N; n++ {
		ret += PowerTail(n, n)
	}
	return ret % base
}

const base = 1e10

func MulTail(a int64, b int64) (ret int64) {
	a = a % base
	b = b % base
	ret = a * b
	ret = ret % base
	return
}

func PowerTail(a int64, b int64) (ret int64) {
	ret = 1
	var i int64
	for i = 0; i < b; i++ {
		ret = MulTail(ret, a)
	}
	return
}

// Problem 49 - Prime permutations
//
// The arithmetic sequence, 1487, 4817, 8147, in which each of the terms increases by 3330, is unusual in two ways: (i) each of the three terms are prime, and, (ii) each of the 4-digit numbers are permutations of one another.
//
// There are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes, exhibiting this property, but there is one other 4-digit increasing sequence.
//
// What 12-digit number do you form by concatenating the three terms in this sequence?
func PE49() (ret []string) {
	GenPrimes(10000)
	for i := 1001; i < 10000; i += 2 {
		j := i + 3330
		k := j + 3330
		if !InInts(primes, i) || !InInts(primes, j) || !InInts(primes, k) {
			continue
		}
		if IsPermutations(i, j) && IsPermutations(i, k) {
			ret = append(ret, strconv.Itoa(i)+strconv.Itoa(j)+strconv.Itoa(k))
		}
	}
	return
}

// Problem 50 - Consecutive prime sum
//
// The prime 41, can be written as the sum of six consecutive primes:
//   41 = 2 + 3 + 5 + 7 + 11 + 13
// This is the longest sum of consecutive primes that adds to a prime below one-hundred.
//
// The longest sum of consecutive primes below one-thousand that adds to a prime, contains 21 terms, and is equal to 953.
//
// Which prime, below one-million, can be written as the sum of the most consecutive primes?
func PE50(n int) (ret int) {
	GenPrimes(n)
	SumPrimes(n)
	max := sort.SearchInts(sumprimes, n)
	for i := max; ; i-- {
		for j := 0; j <= max-i; j++ {
			if j == 0 {
				if ret = sumprimes[i-1]; InInts(primes, ret) {
					return
				}
			} else {
				if ret = sumprimes[i+j-1] - sumprimes[j-1]; InInts(primes, ret) {
					return
				}
			}
		}
	}
}
